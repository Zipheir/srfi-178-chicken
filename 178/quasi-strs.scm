(: bitvector-prefix-length (bitvector bitvector --> integer))
(define (bitvector-prefix-length bvec1 bvec2)
  (assert-type 'bitvector-prefix-length (bitvector? bvec1))
  (assert-type 'bitvector-prefix-length (bitvector? bvec2))
  (let ((end (min (%bitvector-length-no-checks bvec1)
                  (%bitvector-length-no-checks bvec2))))
    (if (eqv? bvec1 bvec2)
        end
        (let lp ((i 0))
          (if (or (>= i end)
                  (not (= (%bitvector-ref/int-no-checks bvec1 i)
                          (%bitvector-ref/int-no-checks bvec2 i))))
              i
              (lp (+ i 1)))))))

(: bitvector-suffix-length (bitvector bitvector --> integer))
(define (bitvector-suffix-length bvec1 bvec2)
  (assert-type 'bitvector-suffix-length (bitvector? bvec1))
  (assert-type 'bitvector-suffix-length (bitvector? bvec2))
  (let ((end1 (%bitvector-length-no-checks bvec1))
        (end2 (%bitvector-length-no-checks bvec2)))
    (let* ((delta (min end1 end2))
           (start (- end1 delta)))
      (if (eqv? bvec1 bvec2)
          delta
          (let lp ((i (- end1 1)) (j (- end2 1)))
            (if (or (< i start)
                    (not (= (%bitvector-ref/int-no-checks bvec1 i)
                            (%bitvector-ref/int-no-checks bvec2 j))))
                (- (- end1 i) 1)
                (lp (- i 1) (- j 1))))))))

(: bitvector-prefix? (bitvector bitvector --> boolean))
(define (bitvector-prefix? bvec1 bvec2)
  (assert-type 'bitvector-prefix? (bitvector? bvec1))
  (assert-type 'bitvector-prefix? (bitvector? bvec2))
  (let ((len1 (%bitvector-length-no-checks bvec1)))
    (and (<= len1 (%bitvector-length-no-checks bvec2))
         (= (bitvector-prefix-length bvec1 bvec2) len1))))

(: bitvector-suffix? (bitvector bitvector --> boolean))
(define (bitvector-suffix? bvec1 bvec2)
  (assert-type 'bitvector-suffix? (bitvector? bvec1))
  (assert-type 'bitvector-suffix? (bitvector? bvec2))
  (let ((len1 (%bitvector-length-no-checks bvec1)))
    (and (<= len1 (%bitvector-length-no-checks bvec2))
         (= (bitvector-suffix-length bvec1 bvec2) len1))))

(: bitvector-pad (bit bitvector integer -> bitvector))
(define (bitvector-pad bit bvec len)
  (assert-type 'bitvector-pad (%bit? bit))
  (assert-type 'bitvector-pad (bitvector? bvec))
  (assert-type 'bitvector-pad (exact-natural? len))
  (let ((old-len (%bitvector-length-no-checks bvec)))
    (if (<= len old-len)
        bvec
        (let ((result (make-bitvector len bit)))
          (bitvector-copy! result (- len old-len) bvec)
          result))))

(: bitvector-pad-right (bit bitvector integer -> bitvector))
(define (bitvector-pad-right bit bvec len)
  (assert-type 'bitvector-pad-right (%bit? bit))
  (assert-type 'bitvector-pad-right (bitvector? bvec))
  (assert-type 'bitvector-pad-right (exact-natural? len))
  (if (<= len (%bitvector-length-no-checks bvec))
      bvec
      (let ((result (make-bitvector len bit)))
        (bitvector-copy! result 0 bvec)
        result)))

(: %bitvector-skip (bitvector bit --> (or integer false)))
(define (%bitvector-skip bvec bit)
  (let ((len (%bitvector-length-no-checks bvec))
        (int (bit->integer bit)))
    (let lp ((i 0))
      (and (< i len)
           (if (= int (%bitvector-ref/int-no-checks bvec i))
               (lp (+ i 1))
               i)))))

(: %bitvector-skip-right (bitvector bit -> (or integer false)))
(define (%bitvector-skip-right bvec bit)
  (let ((len (%bitvector-length-no-checks bvec))
        (int (bit->integer bit)))
    (let lp ((i (- len 1)))
      (and (>= i 0)
           (if (= int (%bitvector-ref/int-no-checks bvec i))
               (lp (- i 1))
               i)))))

(: bitvector-trim (bit bitvector -> bitvector))
(define (bitvector-trim bit bvec)
  (assert-type 'bitvector-trim (%bit? bit))
  (assert-type 'bitvector-trim (bitvector? bvec))
  (cond ((%bitvector-skip bvec bit) =>
         (lambda (skip)
           (bitvector-copy bvec skip (%bitvector-length-no-checks bvec))))
        (else (bitvector))))

(: bitvector-trim-right (bit bitvector -> bitvector))
(define (bitvector-trim-right bit bvec)
  (assert-type 'bitvector-trim-right (%bit? bit))
  (assert-type 'bitvector-trim-right (bitvector? bvec))
  (cond ((%bitvector-skip-right bvec bit) =>
         (lambda (skip)
           (bitvector-copy bvec 0 (+ skip 1))))
        (else (bitvector))))

(: bitvector-trim-both (bit bitvector -> bitvector))
(define (bitvector-trim-both bit bvec)
  (assert-type 'bitvector-trim-both (%bit? bit))
  (assert-type 'bitvector-trim-both (bitvector? bvec))
  (cond ((%bitvector-skip bvec bit) =>
         (lambda (skip)
           (bitvector-copy bvec skip (+ 1 (%bitvector-skip-right bvec bit)))))
        (else (bitvector))))
